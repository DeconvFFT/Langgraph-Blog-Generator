#!/usr/bin/env python3
"""
Minimal FastAPI app for Railway debugging
This version removes all complex dependencies to isolate the Railway deployment issue
"""

import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import os
import sys

print("üöÄ Starting minimal FastAPI app...")

app = FastAPI(
    title="Blog Generator API - Minimal",
    description="Minimal version for Railway debugging",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get('/')
async def root():
    """Root endpoint"""
    return {
        "status": "running",
        "message": "Minimal Blog Generator API",
        "version": "1.0.0",
        "environment": {
            "PORT": os.getenv('PORT', 'not_set'),
            "HOST": os.getenv('HOST', 'not_set'),
            "RAILWAY_ENVIRONMENT": os.getenv('RAILWAY_ENVIRONMENT', 'not_set'),
            "GROQ_API_KEY": "set" if os.getenv('GROQ_API_KEY') else "not_set"
        }
    }

@app.get('/health')
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "Blog Generator API - Minimal",
        "port": os.getenv('PORT', 'unknown'),
        "host": os.getenv('HOST', 'unknown')
    }

@app.post('/blogs')
async def create_blogs():
    """Minimal blog endpoint that returns mock data"""
    return {
        "success": True,
        "data": {
            "blog": {
                "title": "ü§ñ Sample AI Blog Post",
                "content": "This is a sample blog post generated by the minimal API. The Railway deployment is working!"
            },
            "topic": "AI Testing",
            "language": "English"
        },
        "message": "Mock blog generated successfully"
    }

if __name__ == '__main__':
    try:
        # Get port from environment or default to 8000
        port = int(os.getenv('PORT', 8000))
        host = os.getenv('HOST', '0.0.0.0')
        
        print(f"üöÄ Starting minimal FastAPI server on {host}:{port}")
        print(f"üîß Environment variables:")
        print(f"   PORT: {os.getenv('PORT', 'not_set')}")
        print(f"   HOST: {os.getenv('HOST', 'not_set')}")
        print(f"   RAILWAY_ENVIRONMENT: {os.getenv('RAILWAY_ENVIRONMENT', 'not_set')}")
        print(f"   GROQ_API_KEY: {'set' if os.getenv('GROQ_API_KEY') else 'not_set'}")
        
        uvicorn.run(
            "app_minimal:app", 
            host=host,
            port=port,
            reload=False,
            log_level="info"
        )
    except Exception as e:
        print(f"‚ùå Failed to start server: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
